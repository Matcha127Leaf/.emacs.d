* Draw Line From Table
#+NAME: table_name
|---+--------|
| x | test_y |
| 0 |      2 |
| 1 |      3 |
|---+--------|

#+NAME: draw_line_from_table
#+BEGIN_SRC python :results value raw file replace :var table=table_name :var title="" :var xdata="" :var ydata="" :exports results
  import matplotlib.pyplot as plt
  import numpy as np
  import pandas as pd

  df = pd.DataFrame(table[1:])
  df.columns = table[0]
  if xdata:
    df = df.set_index(xdata)
  print(df.columns)
  print(df.index)

  if ydata:
    df.plot.line(y=ydata, rot=45, fontsize=8)
  else:
    df.plot.line(rot=45, fontsize=8)
  plt.subplots_adjust(bottom=0.2)
  filename = "img/" + title + ".jpg"
  plt.savefig(filename)
  return(filename) # return this to org-mode
#+END_SRC

* Draw FSM using pydot from table
#+TBLNAME: h264_scf_fsm
|-----------+------------+--------------------------------------|
| cur_state | next_state | condition                            |
|-----------+------------+--------------------------------------|
| IDLE      | SCF        | blk_start = 1                        |
| SCF       | LSCF       | scf = 1  OR num_scf == num_nz_coef-1 |
| SCF       | SCF        | scf = 0                              |
| LSCF      | SCF        | lscf = 0                             |
| LSCF      | IDLE       | lscf = 1                             |
|-----------+------------+--------------------------------------|


#+NAME: pydot_fsm
#+begin_src python :results value raw file replace :var table=h264_scf_fsm :var title="h264_scf_fsm" :var rank_table="" :exports results
  import pydot
  import numpy as np
  import pandas as pd

  def add_node(graph, name, node_style, color):
    node = pydot.Node(name, style=node_style, fillcolor=color)
    graph.add_node(node)
    return(node)

  def add_edge(graph, from_node, to_node, label_name="", label_font_color="", font_size="", line_color=""):
    edge = pydot.Edge(from_node, to_node)
    if (label_name != ""):
      edge.set_label(label_name)
    if (label_font_color != ""):
      edge.set_labelfontcolor(label_font_color)
    if (font_size != ""):
      edge.set_fontsize(font_size)
    if (line_color != ""):
      edge.set_color(line_color)
    graph.add_edge(edge)


  graph = pydot.Dot(graph_type='digraph') # directed graph

  df = pd.DataFrame(table[1:])
  df.columns = table[0]
  graph.set_node_defaults(fontname='helvetica')
  graph.set_edge_defaults(fontname='helvetica', fontsize="8.0")

  state  = list(df['cur_state'])
  state.extend(list(df['next_state']))
  state = list(set(state))

  node = {}
  for s in state:
    node[s] = add_node(graph, s, "filled", "white")

  for index, row in df.iterrows():
    node_from = row['cur_state']
    node_to   = row['next_state']
    condition = row['condition']
    edge = add_edge(graph, node_from, node_to, condition)

    
  if rank_table:
    df_rank = pd.DataFrame(rank_table[1:])
    df_rank.columns = rank_table[0]
    ranks = list(set(list(df_rank['rank'])))
    print(ranks)
    for r in ranks:
      df_tmp = df_rank[df_rank['rank'] == r]
      print(df_tmp)
      nodes = list(df_tmp['state'])
      sg = pydot.Subgraph(rank=r)
      for n in nodes:
  	 print(n)
  	 sg.add_node(node[n])
      graph.add_subgraph(sg)

  
  filename = "img/" + title + ".jpg"
  graph.write_jpeg(filename, prog='dot')
  dotfilename = "img/" + title + ".dotfile";
  graph.write(dotfilename, format='raw', prog='dot')
  return(filename) # return this to org-mode
#+end_src

